/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as TermsRouteImport } from "./routes/terms";
import { Route as TasksRouteImport } from "./routes/tasks";
import { Route as SignoutRouteImport } from "./routes/signout";
import { Route as SigninRouteImport } from "./routes/signin";
import { Route as PrivacyRouteImport } from "./routes/privacy";
import { Route as AdminRouteImport } from "./routes/admin";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as TasksIndexRouteImport } from "./routes/tasks/index";
import { Route as AdminIndexRouteImport } from "./routes/admin/index";
import { Route as TasksNewRouteImport } from "./routes/tasks/new";
import { Route as TasksTaskIdRouteImport } from "./routes/tasks/$taskId";
import { Route as DebugMonitoringRouteImport } from "./routes/debug/monitoring";
import { Route as AdminUsersIndexRouteImport } from "./routes/admin/users/index";
import { Route as AdminTasksIndexRouteImport } from "./routes/admin/tasks/index";
import { Route as AdminUsersUserIdRouteImport } from "./routes/admin/users/$userId";
import { Route as AdminTasksNewRouteImport } from "./routes/admin/tasks/new";
import { Route as AdminTasksTaskIdRouteImport } from "./routes/admin/tasks/$taskId";
import { Route as AdminEmailsWelcomeRouteImport } from "./routes/admin/emails/welcome";

const TermsRoute = TermsRouteImport.update({
  id: "/terms",
  path: "/terms",
  getParentRoute: () => rootRouteImport,
} as any);
const TasksRoute = TasksRouteImport.update({
  id: "/tasks",
  path: "/tasks",
  getParentRoute: () => rootRouteImport,
} as any);
const SignoutRoute = SignoutRouteImport.update({
  id: "/signout",
  path: "/signout",
  getParentRoute: () => rootRouteImport,
} as any);
const SigninRoute = SigninRouteImport.update({
  id: "/signin",
  path: "/signin",
  getParentRoute: () => rootRouteImport,
} as any);
const PrivacyRoute = PrivacyRouteImport.update({
  id: "/privacy",
  path: "/privacy",
  getParentRoute: () => rootRouteImport,
} as any);
const AdminRoute = AdminRouteImport.update({
  id: "/admin",
  path: "/admin",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => TasksRoute,
} as any);
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AdminRoute,
} as any);
const TasksNewRoute = TasksNewRouteImport.update({
  id: "/new",
  path: "/new",
  getParentRoute: () => TasksRoute,
} as any);
const TasksTaskIdRoute = TasksTaskIdRouteImport.update({
  id: "/$taskId",
  path: "/$taskId",
  getParentRoute: () => TasksRoute,
} as any);
const DebugMonitoringRoute = DebugMonitoringRouteImport.update({
  id: "/debug/monitoring",
  path: "/debug/monitoring",
  getParentRoute: () => rootRouteImport,
} as any);
const AdminUsersIndexRoute = AdminUsersIndexRouteImport.update({
  id: "/users/",
  path: "/users/",
  getParentRoute: () => AdminRoute,
} as any);
const AdminTasksIndexRoute = AdminTasksIndexRouteImport.update({
  id: "/tasks/",
  path: "/tasks/",
  getParentRoute: () => AdminRoute,
} as any);
const AdminUsersUserIdRoute = AdminUsersUserIdRouteImport.update({
  id: "/users/$userId",
  path: "/users/$userId",
  getParentRoute: () => AdminRoute,
} as any);
const AdminTasksNewRoute = AdminTasksNewRouteImport.update({
  id: "/tasks/new",
  path: "/tasks/new",
  getParentRoute: () => AdminRoute,
} as any);
const AdminTasksTaskIdRoute = AdminTasksTaskIdRouteImport.update({
  id: "/tasks/$taskId",
  path: "/tasks/$taskId",
  getParentRoute: () => AdminRoute,
} as any);
const AdminEmailsWelcomeRoute = AdminEmailsWelcomeRouteImport.update({
  id: "/emails/welcome",
  path: "/emails/welcome",
  getParentRoute: () => AdminRoute,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/admin": typeof AdminRouteWithChildren;
  "/privacy": typeof PrivacyRoute;
  "/signin": typeof SigninRoute;
  "/signout": typeof SignoutRoute;
  "/tasks": typeof TasksRouteWithChildren;
  "/terms": typeof TermsRoute;
  "/debug/monitoring": typeof DebugMonitoringRoute;
  "/tasks/$taskId": typeof TasksTaskIdRoute;
  "/tasks/new": typeof TasksNewRoute;
  "/admin/": typeof AdminIndexRoute;
  "/tasks/": typeof TasksIndexRoute;
  "/admin/emails/welcome": typeof AdminEmailsWelcomeRoute;
  "/admin/tasks/$taskId": typeof AdminTasksTaskIdRoute;
  "/admin/tasks/new": typeof AdminTasksNewRoute;
  "/admin/users/$userId": typeof AdminUsersUserIdRoute;
  "/admin/tasks": typeof AdminTasksIndexRoute;
  "/admin/users": typeof AdminUsersIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/privacy": typeof PrivacyRoute;
  "/signin": typeof SigninRoute;
  "/signout": typeof SignoutRoute;
  "/terms": typeof TermsRoute;
  "/debug/monitoring": typeof DebugMonitoringRoute;
  "/tasks/$taskId": typeof TasksTaskIdRoute;
  "/tasks/new": typeof TasksNewRoute;
  "/admin": typeof AdminIndexRoute;
  "/tasks": typeof TasksIndexRoute;
  "/admin/emails/welcome": typeof AdminEmailsWelcomeRoute;
  "/admin/tasks/$taskId": typeof AdminTasksTaskIdRoute;
  "/admin/tasks/new": typeof AdminTasksNewRoute;
  "/admin/users/$userId": typeof AdminUsersUserIdRoute;
  "/admin/tasks": typeof AdminTasksIndexRoute;
  "/admin/users": typeof AdminUsersIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/admin": typeof AdminRouteWithChildren;
  "/privacy": typeof PrivacyRoute;
  "/signin": typeof SigninRoute;
  "/signout": typeof SignoutRoute;
  "/tasks": typeof TasksRouteWithChildren;
  "/terms": typeof TermsRoute;
  "/debug/monitoring": typeof DebugMonitoringRoute;
  "/tasks/$taskId": typeof TasksTaskIdRoute;
  "/tasks/new": typeof TasksNewRoute;
  "/admin/": typeof AdminIndexRoute;
  "/tasks/": typeof TasksIndexRoute;
  "/admin/emails/welcome": typeof AdminEmailsWelcomeRoute;
  "/admin/tasks/$taskId": typeof AdminTasksTaskIdRoute;
  "/admin/tasks/new": typeof AdminTasksNewRoute;
  "/admin/users/$userId": typeof AdminUsersUserIdRoute;
  "/admin/tasks/": typeof AdminTasksIndexRoute;
  "/admin/users/": typeof AdminUsersIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/admin"
    | "/privacy"
    | "/signin"
    | "/signout"
    | "/tasks"
    | "/terms"
    | "/debug/monitoring"
    | "/tasks/$taskId"
    | "/tasks/new"
    | "/admin/"
    | "/tasks/"
    | "/admin/emails/welcome"
    | "/admin/tasks/$taskId"
    | "/admin/tasks/new"
    | "/admin/users/$userId"
    | "/admin/tasks"
    | "/admin/users";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/privacy"
    | "/signin"
    | "/signout"
    | "/terms"
    | "/debug/monitoring"
    | "/tasks/$taskId"
    | "/tasks/new"
    | "/admin"
    | "/tasks"
    | "/admin/emails/welcome"
    | "/admin/tasks/$taskId"
    | "/admin/tasks/new"
    | "/admin/users/$userId"
    | "/admin/tasks"
    | "/admin/users";
  id:
    | "__root__"
    | "/"
    | "/admin"
    | "/privacy"
    | "/signin"
    | "/signout"
    | "/tasks"
    | "/terms"
    | "/debug/monitoring"
    | "/tasks/$taskId"
    | "/tasks/new"
    | "/admin/"
    | "/tasks/"
    | "/admin/emails/welcome"
    | "/admin/tasks/$taskId"
    | "/admin/tasks/new"
    | "/admin/users/$userId"
    | "/admin/tasks/"
    | "/admin/users/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AdminRoute: typeof AdminRouteWithChildren;
  PrivacyRoute: typeof PrivacyRoute;
  SigninRoute: typeof SigninRoute;
  SignoutRoute: typeof SignoutRoute;
  TasksRoute: typeof TasksRouteWithChildren;
  TermsRoute: typeof TermsRoute;
  DebugMonitoringRoute: typeof DebugMonitoringRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/terms": {
      id: "/terms";
      path: "/terms";
      fullPath: "/terms";
      preLoaderRoute: typeof TermsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/tasks": {
      id: "/tasks";
      path: "/tasks";
      fullPath: "/tasks";
      preLoaderRoute: typeof TasksRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/signout": {
      id: "/signout";
      path: "/signout";
      fullPath: "/signout";
      preLoaderRoute: typeof SignoutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/signin": {
      id: "/signin";
      path: "/signin";
      fullPath: "/signin";
      preLoaderRoute: typeof SigninRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/privacy": {
      id: "/privacy";
      path: "/privacy";
      fullPath: "/privacy";
      preLoaderRoute: typeof PrivacyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/admin": {
      id: "/admin";
      path: "/admin";
      fullPath: "/admin";
      preLoaderRoute: typeof AdminRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/tasks/": {
      id: "/tasks/";
      path: "/";
      fullPath: "/tasks/";
      preLoaderRoute: typeof TasksIndexRouteImport;
      parentRoute: typeof TasksRoute;
    };
    "/admin/": {
      id: "/admin/";
      path: "/";
      fullPath: "/admin/";
      preLoaderRoute: typeof AdminIndexRouteImport;
      parentRoute: typeof AdminRoute;
    };
    "/tasks/new": {
      id: "/tasks/new";
      path: "/new";
      fullPath: "/tasks/new";
      preLoaderRoute: typeof TasksNewRouteImport;
      parentRoute: typeof TasksRoute;
    };
    "/tasks/$taskId": {
      id: "/tasks/$taskId";
      path: "/$taskId";
      fullPath: "/tasks/$taskId";
      preLoaderRoute: typeof TasksTaskIdRouteImport;
      parentRoute: typeof TasksRoute;
    };
    "/debug/monitoring": {
      id: "/debug/monitoring";
      path: "/debug/monitoring";
      fullPath: "/debug/monitoring";
      preLoaderRoute: typeof DebugMonitoringRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/admin/users/": {
      id: "/admin/users/";
      path: "/users";
      fullPath: "/admin/users";
      preLoaderRoute: typeof AdminUsersIndexRouteImport;
      parentRoute: typeof AdminRoute;
    };
    "/admin/tasks/": {
      id: "/admin/tasks/";
      path: "/tasks";
      fullPath: "/admin/tasks";
      preLoaderRoute: typeof AdminTasksIndexRouteImport;
      parentRoute: typeof AdminRoute;
    };
    "/admin/users/$userId": {
      id: "/admin/users/$userId";
      path: "/users/$userId";
      fullPath: "/admin/users/$userId";
      preLoaderRoute: typeof AdminUsersUserIdRouteImport;
      parentRoute: typeof AdminRoute;
    };
    "/admin/tasks/new": {
      id: "/admin/tasks/new";
      path: "/tasks/new";
      fullPath: "/admin/tasks/new";
      preLoaderRoute: typeof AdminTasksNewRouteImport;
      parentRoute: typeof AdminRoute;
    };
    "/admin/tasks/$taskId": {
      id: "/admin/tasks/$taskId";
      path: "/tasks/$taskId";
      fullPath: "/admin/tasks/$taskId";
      preLoaderRoute: typeof AdminTasksTaskIdRouteImport;
      parentRoute: typeof AdminRoute;
    };
    "/admin/emails/welcome": {
      id: "/admin/emails/welcome";
      path: "/emails/welcome";
      fullPath: "/admin/emails/welcome";
      preLoaderRoute: typeof AdminEmailsWelcomeRouteImport;
      parentRoute: typeof AdminRoute;
    };
  }
}

interface AdminRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute;
  AdminEmailsWelcomeRoute: typeof AdminEmailsWelcomeRoute;
  AdminTasksTaskIdRoute: typeof AdminTasksTaskIdRoute;
  AdminTasksNewRoute: typeof AdminTasksNewRoute;
  AdminUsersUserIdRoute: typeof AdminUsersUserIdRoute;
  AdminTasksIndexRoute: typeof AdminTasksIndexRoute;
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute;
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminEmailsWelcomeRoute: AdminEmailsWelcomeRoute,
  AdminTasksTaskIdRoute: AdminTasksTaskIdRoute,
  AdminTasksNewRoute: AdminTasksNewRoute,
  AdminUsersUserIdRoute: AdminUsersUserIdRoute,
  AdminTasksIndexRoute: AdminTasksIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
};

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren);

interface TasksRouteChildren {
  TasksTaskIdRoute: typeof TasksTaskIdRoute;
  TasksNewRoute: typeof TasksNewRoute;
  TasksIndexRoute: typeof TasksIndexRoute;
}

const TasksRouteChildren: TasksRouteChildren = {
  TasksTaskIdRoute: TasksTaskIdRoute,
  TasksNewRoute: TasksNewRoute,
  TasksIndexRoute: TasksIndexRoute,
};

const TasksRouteWithChildren = TasksRoute._addFileChildren(TasksRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  SigninRoute: SigninRoute,
  SignoutRoute: SignoutRoute,
  TasksRoute: TasksRouteWithChildren,
  TermsRoute: TermsRoute,
  DebugMonitoringRoute: DebugMonitoringRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
