# Mantine to shadcn/ui Migration Guide

## 0. Component Installation

ALWAYS try to install official shadcn/ui components first:

```bash
bun x --bun shadcn@latest add <component>
```

Only create custom components if they don't exist in the official shadcn/ui library.
Check https://ui.shadcn.com/docs/components for available components.

Use tailwind 4.  We have migrated from 3.

## 1. Component Mapping

### Layout Components

- `Stack` -> `<div className="flex flex-col gap-{size}">`
  - gap-4 = md
  - gap-8 = lg
  - gap-12 = xl
- `Group` -> `<div className="flex gap-{size}">` or grid layouts
- `Container` -> shadcn/ui `Container` (custom component if not available)

### Typography

- `Title` -> shadcn/ui `Title` (custom component)
- `Text` -> `<p className="text-muted-foreground">`

### Interactive Components

- `Table` -> shadcn/ui `Table` components:
  ```tsx
  <Table>
    <TableHeader>
      <TableRow>
        <TableHead>Header</TableHead>
      </TableRow>
    </TableHeader>
    <TableBody>
      <TableRow>
        <TableCell>Cell</TableCell>
      </TableRow>
    </TableBody>
  </Table>
  ```
- `Card` -> shadcn/ui `Card` components
- `Button` -> shadcn/ui `Button`
  - For links: `<Button asChild><Link>Text</Link></Button>`
- `TextInput` -> shadcn/ui `Input` with `Label`
- `Select` -> shadcn/ui `Select` components
- `Anchor` -> `Button` with `asChild` and `<a>` or `Link`

## 2. Common Patterns

### Mantine Props to Tailwind

- `mt="xl"` -> `mt-8`
- `gap="md"` -> `gap-4`
- `ta="center"` -> `text-center`
- `c="dimmed"` -> `text-muted-foreground`
- `size="lg"` -> component-specific size class

### Loading States

```tsx
{
  loading ? (
    <>
      <div className="h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
      <span className="ml-2">Loading...</span>
    </>
  ) : (
    "Content"
  );
}
```

## 3. Form Patterns

```tsx
<div className="grid w-full max-w-sm items-center gap-1.5">
  <Label htmlFor="field">Label Text</Label>
  <Input
    id="field"
    value={value}
    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value)}
  />
</div>
```

## 4. Layout Structure

```tsx
<div className="flex flex-col gap-8">
  <Title>Page Title</Title>
  <Card>
    <CardHeader>
      <CardTitle>Section Title</CardTitle>
    </CardHeader>
    <CardContent>{/* Content */}</CardContent>
  </Card>
</div>
```

## 5. Best Practices

- ALWAYS check ui.shadcn.com for official components first
- Use shadcn CLI to add components: `bun x --bun shadcn@latest add <component>`
- Add TypeScript types for event handlers
- Use semantic HTML elements
- Follow shadcn/ui's component composition
- Use semantic color tokens (text-muted-foreground, etc.)
- Add accessibility attributes
- Maintain consistent spacing and typography
- For clickable rows/elements, use `cursor-pointer` class
- Wrap table in Container for consistent padding/spacing

## 6. Common Imports

```tsx
// Always import from ~/components/ui/
import { Button } from "~/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import {
  Table,
  TableHeader,
  TableBody,
  TableRow,
  TableHead,
  TableCell,
} from "~/components/ui/table";
```

## 7. Migration Process

1. Check ui.shadcn.com for available components
2. Install official components via shadcn CLI
3. Identify Mantine components in file
4. Map to shadcn/ui equivalents
5. Update imports to use ~/components/ui/
6. Replace Mantine props with Tailwind
7. Add proper TypeScript types
8. Test functionality and styling
9. Verify accessibility
10. Update any related components

## 8. Custom Components

Only create custom components when:

1. The component doesn't exist in shadcn/ui
2. The component is specific to your application
3. You need to extend shadcn/ui functionality

When creating custom components:

1. Follow shadcn/ui patterns and conventions
2. Use similar file structure and naming
3. Utilize shadcn/ui's utility functions (cn)
4. Maintain consistent styling approach
5. Add proper TypeScript types
6. Document component API
